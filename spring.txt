Spring - фреймворк состоящии из множества модулей в основном используемых при разработке крупных
корпоративных приложении. Spring может использоваться как в консольных приложениях так и в десктоп.
но наиболее распространенное использование это в веб разработке.

Spring является IoC (Inversion of Control) инверсия управления подразумевающая перекладывание
ответсвенности за жизненный цикл объектов приложения на фреймворк это IoC контейнер.
IoC контейнер полностью отвечает за создание объектов их дальнейшее использование и уничтожение.
Для получения объекта требуемого типа с точки зрения разработчика достаточно просто запросить
объект у Spring IoC контейнера, он свою очередь должен создать объект по мере необходимости и вернуть
его. Spring IoC контейнеру необходимо просто определить логику создания объекта требуемого типа.
Объект жизненным циклом которого управляет Spring IoC контейнер называется Spring bean.
EJB - Enterprise Java Bean -> Java EE
Spring bean -> Spring Framework

Сервер приложение - умеет принимать запросы и перенаправлять их в приложение, сам сервер приложения
выступает в качестве реализации Java EE спецификации.
На равне с IoC в Spring активно используется концепция DI (Dependency Injection) внедрение зависимостей.
Подразумевающая возможность внедрения объектов одного типа в объект другого типа.
Внедрением зависимостей можно пользоваться между Spring Bean, важно чтобы объектом управлял IoC контейнер.

Tomcat started on port 8080 (http) with context path '/' - означает что сервер приложении Tomcat
собранным Spring приложением был запущен на локальном адресе localhost либо 127.0.0.1
через порт 8080 строка context path '\' означает доп адрес для доступа к приложению.

Любое веб приложение работает по модели клиент сервер которая подразумевает две стороны
общающиеся между собой. Одна сторона отпраляет запрос и ожидает ответ, а вторая принимает запрос и
формирует и отправляет ответ.
Клиентом называется сторона формирующая запрос, сервер называется в свою очередь сторона отправляющая запрос.

Клиент-> Запрос - Сервер - Ответ - Клиент


HTTP - это транспортный сетевой протокол предназначенный для выстрайвания взаимодействия
между клиентом и сервером. Клиент отпраляет HTTP запрос на сервер с целью его обработки
и получения HTTP ответа, и запрос и ответ представялет собой объем структурированной текстовой информации.
HTTP запрос состоит из следующих секции:
1. Адрес запрашиваемого ресурса и HTTP метод - в данный секции явно определяется адрес которому должен быть
отправлен запрос при помощи указанного http метода. Протоколом HTTP предусмотрено два базовых метода для
выполнения запросов GET и POST. Метод Get при передаче данных в запросе будет вписывать
их в адрес запрашиваемого ресурса. Метод get позволяет отправлять примитивные данные как строка но не позволяет
передавать файлы. В свою очередь метод post передаёт данные в спец секции запроса называемой телом(request body)
которое скрыто внутри запроса, метод post позволяет передавать любые сложные структуры.
2.Заголовки - спец свойства мета данные передаваемые в формате ключ значение предназначенные для
предоставления доп информации о запросе и ожидаемом ответе.
3. Тело HTTP запроса - непосредственно передавамые клиентом серверу, важно отметить что тело запроса
доступно только при использовании метода post.

Любой HTTP запрос шифруется при наличии SSL сертификата на сайте либо если сертификат отсуствует
запрос отправляется полностью в исходном виде.

SSL (RSA) -
Любой ssl сертификат делятся на публичный и первичный ключ.
1. Приватный ключ - последовательность символов используемая для дешифровки строки
сгенерированной при помощи публичного ключа который является парой приватному. приватный ключ
ssl сертификата распологается на сервере принимающим HTTP запрос.
2. Публичный ключ - последовательность символов используемая для шифровки строки и ее отправки получателью.
Дешифрованную строку можно будет вернуть в исходный вид при помощи приватного ключа.
Публичный ключ находится в браузере с целью шифровки HTTP запросов отправляемых на сервер.


http
https(ssl)


HTTP -> Клиент -> HTTP запрос -> Посредник(видит все содержимое запроса в полном обьеме) -> Сервер
HTTPS(SSL) -> Клиент -> HTTP запрос шифруется через публичный ключ -> Посредник(видит все содержимое запроса
в зашифрованном виде) -> Сервер(дешифрует входящии HTTP запрос через приватный ключ)


HTTP ответ состоит из след секции:
1. Статус HTTP ответа - целое число описанное в протоколе в HTTP  и говорящее об определенном
состоянии ответа.
4 основных группы HTTP статусов:
2ххх(запрос был успешно выполнен),3ххх(запрос был успешно выполнен но после перенаправления),4ххх(ошибка
выполения запроса по вине клиента),5ххх(ошибка при выполнения запроса по вине сервера)

В Spring есть спец компоненты называемыми контроллерами это классы которым применена аннотация @Controller
либо @RestController
Методы контроллера представляет собой отдельно взятый ресурс приложения но не все методы
(адрес которому может обратиться клиент) чтобы метод контроллера воспринимался как ресурс приложения ему
необходимо применить @mapping аннотации

@RequestMapping(path= ) - позволяет определить адрес обращения для метода контроллера вне зависимости
от HTTP метода входящего запроса

@GetMapping - аналог анотации requestmapping исключительно работающая для HTTP метода get

@PostMapping - аналог анотации requestmapping исключительно работающая для HTTP метода post

Браузер воспринимает ответ HTTP ответ сервера по разному в зависимости от значения заголовка
Content-Type, значение данного заголовка можно регулировать при помощи @Mapping аннотации и
их параметра produces. Возможные значения заголовка text/plain
text/html, image/jpeg, image/png, application/json, application/pdf

JSON формат ключ значения
{k:v} - словарь обьект который может состоять из множества пар ключ значения.
{name:first, age:25}

Каждый метод контроллера с аннотацией @RestController будет использовать для всех методов
значение application/json для заголовка Content-Type по умолчанию любой результирующии объект
Spring будет пытаться конвертировать в JSON строку при помощи встроенной библиотеки Jackson.

Rest Api -
/products (GET) - получить все товары
/products/7 (GET) - получить товар с номером 7
/products (POST ) - создать новый товар
/products/7 (PUT) - изменить товар с номером 7
/products/7 (DELETE) - удалить товар с номером 7

При использовании HTTP метода GET можно передавать параметры напрямую в адрес запрашиваемого
ресурса в формате ключ-значения

/some_resource - обращение без передачи параметров
/some_resource?name=Bill - обращение с параметром name значения которого является Bill
/some_resource?name=Bill&age=34 - с параметрами name и age

Ключевая аннтоация это @Component - она применяется к классу с целью преобразования его в
Spring bean. От аннотации @Component идут производные аннотации такие как @Controller, @RestController,
@Service, @Repository, контроллеры так же являются spring beanом

